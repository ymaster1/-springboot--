<?xml version="1.0" encoding="UTF-8"?>
<!-- 配置LoggerConfig，置log4j2自身内部的信息输出日志级别为WARN，可以不设置 ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<Configuration status="WARN" monitorInterval="5">

    <!--变量配置-->
    <Properties>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
        <property name="LOG_PATTERN" value="%date{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"/>
        <!-- 定义日志存储的路径，不要配置相对路径 -->
        <!--        <property name="FILE_PATH" value="更换为你的日志路径" />-->
        <!--        <property name="FILE_NAME" value="更换为你的项目名" />-->
    </Properties>

    <!-- Appenders支持配置多个Appender，支持向不同的目标输送日志，本例为配置向控制台输出 -->
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <!--    %d{yyyy/MM/dd HH:mm:ss.SSS}   输出日志打印的时间，精确到毫秒
                    [%t]  输出当前线程名称
                    %-5level  输出日志级别，-5表示左对齐并且固定输出5个字符，不足在右边补空格
                    %logger{36} 输出logger名称，一般是类的全限定路径名
                    %msg 输出要打印的业务日志信息
                    %n 日志换行
             -->
            <!--            <PatternLayout pattern="%d{yyyy/MM/dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <!--            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>-->
        </Console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用-->
        <!--        <File name="Filelog" fileName="${FILE_PATH}/test.log" append="false">-->
        <!--            <PatternLayout pattern="${LOG_PATTERN}"/>-->
        <!--        </File>-->
    </Appenders>


    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
        <!--        可已覆根标签
        Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出
        level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
        AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender.
        -->
        <Root level="info">
            <AppenderRef ref="Console"/>
        </Root>
        <!--
        Logger：节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等
        过滤掉spring和mybatis的一些无用的DEBUG信息
        name: 用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点
        AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.
        如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，
        此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出。
        -->

        <logger name="org.springframework" level="INFO">
            <AppenderRef ref="Console"/>
        </logger>

        <logger name="org.mybatis" level="INFO" additivity="false">
            <AppenderRef ref="Console"/>
        </logger>
        <!--        降低kafak日志级别-->
        <logger name="org.apache.kafka.clients" level="WARN" additivity="false">
            <AppenderRef ref="Console"/>
        </logger>
        <!--        打印sql-->
        <logger name="com.ym.provider.mapper" level="debug" additivity="false">
            <AppenderRef ref="Console"/>
        </logger>
    </Loggers>
</Configuration>